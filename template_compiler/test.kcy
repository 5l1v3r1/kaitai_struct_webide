templates: 
  main: |
    // This is a generated file! Please edit source .ksy file and use kaitai-struct-compiler to rebuild
    
    var {{root.name}} = {{generateClass(root)}}
    
    // Export for amd environments
    if (typeof define === 'function' && define.amd) {
      define('{{root.name}}', [], function() {
        return {{root.name}};
      });
    }
    
    // Export for CommonJS
    if (typeof module === 'object' && module && module.exports) {
      module.exports = {{root.name}};
    }

  generateClass: |
    (function() {
      {{for enum in this.enums}}
        {{this.name}}.{{enum.name}} = Object.freeze({
          {{for enumItem in items}}
            {{enumItem.name}}: {{enumItem.value}},
          {{/for}}
          
          {{for enumItem in items}}
            {{enumItem.value}}: {{enumItem.name}}
          {{/for}}
        });
      {{/for}}

      function {{this.name}}(_io, _parent, _root) {
        this._io = _io;
        this._parent = _parent;
        this._root = _root || this;
    
        this._read();
      }
      
      {{this.name}}.prototype._read = function() {
        {{for item in this.seq}}
        {{/for}}
      }
    
      {{for instance in this.instances}}
          Object.defineProperty({{this.name}}.prototype, '{{instance.name}}', {
            get: function() {
              if (this.{{instance.backingField}} !== undefined)
                return this.{{instance.backingField}};
              this._m_prop1 = {{instance.value}};
              return this._m_prop1;
            }
          });
      {{/for}}

      {{for subType in this.types}}
        var {{subType.name}} = {{this.name}}.{{subType.name}} = {{generateClass(subType)}}
      {{/for}}
      
      return {{this.name}};
    })();